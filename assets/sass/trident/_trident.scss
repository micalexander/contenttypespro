@import "variables";

.clearfix {
  &:before {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden;
  }
  &:after {
    content: "\0020";
    display: block;
    height: 0;
    overflow: hidden;
    clear: both;
  }
  zoom: 1;
}

/* gotta use border-box */

* { @include box-sizing('border-box'); }

// /* iOS fixes */
html { -webkit-text-size-adjust: none; }
input[type=submit] { -webkit-appearance: none; -moz-appearance: none; }

/* Media Queries for determining javascript events, via http://adactio.com/journal/5429/ */
body:after { content: 'mobile'; height: 0; visibility: hidden; }
@media only screen and (min-width: $width-tablet) and (max-width: $width-desktop - 1px) {
  body:after { content: 'tablet';height: 0; visibility: hidden; }
}
@media only screen and (min-width: $width-desktop) {
  body:after { content: 'desktop';height: 0; visibility: hidden; }
}

/*
-------------------------------------------------------------------------------
 Mixins
-------------------------------------------------------------------------------
*/
// media query
@mixin at($min: null, $max: null, $unit: null) {

  @if $unit == null {
    $unit: em;
  }
  @if $max != null {
    @media (min-width: $min / 16 + $unit) and (max-width: $max /16 + $unit)  { @content; }
  }
  @else {
    $unit: em;
    @media (min-width: ($min / 16) + $unit)  { @content; }
  }
}

// media query
@mixin breakpoint($min-point: 0, $max-point: $width-desktop) {
  @media (min-width: $min-point) and (max-width: $max-point)  { @content; }
}

@mixin mobile($operator: eq)  {

  @if $operator == gt {
    @media (min-width: $width-tablet) { @content; }
  }
  @else if ( $operator == eq ) {
    @media (max-width: $width-tablet - 1){ @content; }
  }
}

@mixin tablet($operator: eq) {

  @if ( $operator == gt ) {
    @media (min-width: $width-desktop){ @content; }
  }
  @else if ( $operator == lt ) {
    @media (max-width: $width-tablet - 1){ @content; }
  }
  @else if ( $operator == eq ) {
    @media (min-width: $width-tablet) and (max-width: $width-desktop - 1 ) { @content; }
  }
  @else if ( $operator == ge ) {
    @media (min-width: $width-tablet){ @content; }
  }
  @else if ( $operator == le ) {
    @media (max-width: $width-tablet - 1){ @content; }
  }
}

@mixin desktop($operator: eq) {

  @if ( $operator == lt ) {
    @media (max-width: $width-desktop - 1){ @content; }
  }
  @else if  ( $operator == eq ) {
    @media (min-width: $width-desktop) { @content; }
  }
}

@mixin font-rem($size) {
  font-size: $size + px;
  font-size: ($size / 10) + rem;
}
@mixin font-em($size){
  font-size: $size + px;
  font-size: ($size / 1.6)/ 10 + em;
}

// input placeholers
@mixin input-placeholder() {
  ::-webkit-input-placeholder { @content; }
  :-moz-placeholder { @content; }
  ::-moz-placeholder { @content; }
  :-ms-input-placeholder { @content; }
}

// custom text selection treatment, developed from http://stackoverflow.com/a/10372599/136018
@mixin selection($color, $background) {
  $prefixes: ("-webkit-","-moz-", "-o-", "");
    @each $prefix in $prefixes {
        ::#{$prefix}selection {
            color: $color;
            background: $background;
            text-shadow:none; // remove any text shadows:twitter.com/miketaylr/status/12228805301)
        }
    }
    /* j.mp/webkit-tap-highlight-color */
  a:link{-webkit-tap-highlight-color:$background;}
  ins{background-color:$background;color:$color;text-decoration:none;}
}

// control font-smoothing
@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

// inline-block the right way
@mixin inline-block($percent: auto) {
  display: inline-block;
  width: $percent;
  padding-right: 2%;
  box-sizing: border-box;
  vertical-align: top;
  zoom: 1;

  .lt-ie8 & {
    display: inline;
  }

  &.last {
    padding-right: 0;
  }
}

// remove ul styling
@mixin ul-reset {
  list-style: none;
  margin: 0;
  padding-bottom: 0;
}

@mixin areas-text-style-nav {
  font-size: .875em;
  text-transform: uppercase;
  letter-spacing: .15em;
}

@mixin hyphenate {
  -ms-word-break: break-all;
  word-break: break-all;
  // Non standard for webkit
  word-break: break-word;
  -webkit-hyphens: auto;
  -moz-hyphens: auto;
  hyphens: auto;
}

@mixin trans-fade-hidden {
  @include transition(opacity $speed linear 0ms, visibility $speed linear 0ms);
  visibility: hidden;
  opacity: 0;
}

@mixin trans-fade-visible {
  visibility: visible;
  opacity: 1;
}

/* -------------------------------------------------
** Squishygrid Sass Mixins
** ---------------------------------------------- */

// Generated at http://squishygrid.com

$span   : 12   !default;
$columns: 12   !default;
$gutter : 2.5  !default;
$at     : 420  !default;

@mixin grid($gutter: $gutter) {

  @if $gutter == 0 {
    width: 100%;
    margin-left: 0;
  }
  @else {
    width: 100 + $gutter * 1%;
    margin-left: -$gutter * 1%;
    > * {
      margin-left: $gutter * 1%;
    }
  }
}

@mixin span($span: $span, $columns: $columns, $gutter: $gutter, $at: $at) {

  display: inline-block;
  vertical-align: top;
  *zoom: 1;
  overflow: hidden;
  *overflow: visible;
  width: 100 - $gutter * 1%;
  margin-right: -.273em;

  @media (min-width: ($at / 16) +  em) {
    @if $gutter == 0 {
      width: $span * (100.0% / $columns);
      margin-left: 0;
    }
    @else {
      width: (100 - ($columns * ($gutter * 1%))) / $columns * $span + (($span - 1) * ($gutter * 1%));
      margin-left: ($gutter * 1%);
    }
  }
}

@mixin offset($offset: 0, $columns: $columns, $gutter: $gutter, $at: $at) {

  margin-left: 0;

  @media (min-width: ($at / 16) +  em) {
    margin-left: (100.0 / $columns) * $offset + ($gutter * 1%);
  }
}
